#!/bin/bash
# Author : SunFox
# License :
# Date 14-06-2013
# Simple Bash File Manager.

###Colors definition :
black='\033[1;30m'
red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;34m'
white='\033[1;37m'
###MAIN Constants
SCRIPT_VERSION="$green v2.0"
SCRIPT_NAME="$green IceD $blue - Simple File Manager $SCRIPT_VERSION"
SCRIPT_CONFIG_FILE="$HOME_DIR/.sfune-sh.cfg"
###Color Function
cecho () {
          #Color-echo function
          #Argument $1 : message.
          #Argument $2 : color.
          NONE=""
          MESSAGE1=${1:-$NONE}
          COLOR1=${2:-$white}
          MESSAGE2=${3:-$NONE}
          COLOR2=${4:-$white}
          echo -e "$COLOR1 $MESSAGE1 $COLOR2 $MESSAGE2"
          return
}
necho () {
          #Color-echo function
          #Argument $1 : message.
          #Argument $2 : color.
          NONE=""
          MESSAGE1=${1:-$NONE}
          COLOR1=${2:-$white}
          MESSAGE2=${3:-$NONE}
          COLOR2=${4:-$white}
          echo -ne "$COLOR1 $MESSAGE1 $COLOR2 $MESSAGE2"
          return
}
#############IceD Functions
check_progs(){
   DIR_PROGS="/usr/bin"
   PROG_VIDEO="mplayer"
   PROG_AUDIO="mplayer"
   PROG_IMAGE="gpicview"
   PROG_IMAGE="gwenview"
   PROG_TEXT="vim"
   PROG_PDF="okular"
   PROG_ODT="libreoffice"
   PROG_TERM="uxterm"
   PROG_RAR="unrar e"
   PROG_ZIP="unzip -d"
}
display_interface(){
	        echo;clear
        cecho "$SCRIPT_NAME"
        cecho "$blue Exit[$green ..q$blue]"
        echo
        echo;cecho "$green [$blue $FOLD $green ]";echo
	}
get_number_folders_files(){
      NUMBER_FOLDERS=0; NUMBER_FILES=0      #Initialize number of folders and files
      SAVEIFS=$IFS: IFS=$(echo -en "\n\b")
      for ELEMENT in `ls -1 $FOLD`; do
        CASO=`ls -l $FOLD | egrep -v ">" | tr -s " " " " | grep "$ELEMENT"`; CASO=${CASO:0:1}
        if [ "$CASO" == "d" ]; then
          NUMBER_FOLDERS=`expr $NUMBER_FOLDERS + 1`
        fi
        if [ "$CASO" == "-" ]; then
          NUMBER_FILES=`expr $NUMBER_FILES + 1`
        fi
      done
      echo; IFS=$SAVEIFS
  }
 display_folders_files(){
      SAVEIFS=$IFS: IFS=$(echo -en "\n\b")
      cecho "$yellow [D] : $NUMBER_FOLDERS"; #SIZE=`du -ch $FOLD"$ELEMENT" | grep total`
      for ELEMENT in `ls -1 $FOLD`; do
        CASO=`ls -l $FOLD | egrep -v ">" | tr -s " " " " | grep "$ELEMENT"`; CASO=${CASO:0:1}
        if [ "$CASO" == "d" ]; then
          NUMBER_FOLDERFILES=`ls $FOLD"$ELEMENT" | wc -l`
          cecho "$blue [$green $NUMBER_FOLDERFILES $blue] "$ELEMENT" " #$blue [$green $SIZE $blue]"
        fi
      done
      echo; IFS=$SAVEIFS
      for ELEMENT in `ls -1 $FOLD`; do
        CASO=`ls -l $FOLD | egrep -v ">" | tr -s " " " " | grep "$ELEMENT"`; CASO=${CASO:0:1}
        if [ "$CASO" != "d" ]; then
          FILE_TYPE="`file $FOLD"$ELEMENT" | cut -d":" -f2`"
          DIR_FIL="$FOLD""$ELEMENT"
          cecho "$yellow $ELEMENT" #$blue [$green$FILE_TYPE $blue ] "            
        fi
      done
      echo; IFS=$SAVEIFS
  }	  
##########################################################
    if [ "$1" == "" ]; then
      OPTION="2"
      check_progs
      FOLD="$HOME/"; cd $FOLD
      while [ "$OPTION" != "..q" ]; do
######Displaying Interface...
      display_interface
######Obtaining Number of Folders and Files
      get_number_folders_files
######Displaying Folders and Files
	  display_folders_files
#######Getting user's option and case
     necho "$blue >>"; read OPTION
     case $OPTION in

     "..q") cecho "Exiting..." ;;
     *)
       if [ "$OPTION" == "/" ]; then
         FOLD="/"
       else
         if [ "${OPTION:0:1}" == "/" ]; then
           FOLD="$OPTION/"; cd $FOLD
         else
           if [ "$OPTION" == ".." ]; then
             cd ..; FOLD=`pwd`"/"
           else # Si se trata de algÃºn archivo o subdirectorio
             FOLD3="`ls $FOLD | grep $OPTION`"
               SAVEIFS=$IFS: IFS=$(echo -en "\n\b")
             if [ -d $FOLD3 ]; then
               FOLD=$FOLD$FOLD3; cd $FOLD; FOLD=$FOLD"/"
               IFS=$SAVEIFS
             else
               SAVEIFS=$IFS: IFS=$(echo -en "\n\b")
               FILE="`ls $FOLD | grep $OPTION`"
               echo $FILE
               IFS=$SAVEIFS
#                for I in `ls $FOLD`; do
#                  if [ "$I" == "$FILE" ]; then
                   #if [ "`ps -A | grep iced | grep tty`" == "" ]; then
                     case "$FILE" in
                       *.txt) $PROG_TERM -e $PROG_TEXT "$FILE" &;;
                       *.cc) $PROG_TERM -e $PROG_TEXT "$FILE" &;;
		               *.pdf) $PROG_TERM -e $PROG_PDF "$FILE" &;;
		               *.odt) $PROG_ODT "$FILE" &;;
		               *.odp) $PROG_ODT "$FILE" &;;
                       *.doc) $PROG_ODT "$FILE" &;;
                       *.jpg) $PROG_TERM -e $PROG_IMAGE $FILE &;;
                       *.jpeg) $PROG_TERM -e $PROG_IMAGE $FILE &;;
		               *.gif) $PROG_TERM -e $PROG_IMAGE $FILE &;;
                       *.png) $PROG_TERM -e $PROG_IMAGE $FILE &;;
                       *.mp3) $PROG_TERM -e $PROG_AUDIO $FILE &;;                      
                       *.avi) $PROG_TERM -e $PROG_VIDEO $FILE &;;
                       *.wmv) $PROG_TERM -e $PROG_VIDEO $FILE &;;
                       *.mkv) $PROG_TERM -e $PROG_VIDEO $FILE &;;                  
                       *.mp4) $PROG_TERM -e $PROG_VIDEO $FILE &;;  
                       *.lst) $PROG_TERM -e mp3blaster -l $FILE &;;
                       #*.rar) unrar "$FILE" &;;
                       #*.zip) $PROG_ZIP "$FILE" &;;
                       *.gzip) $PROG_ZIP "$FILE" &;;
                       *.tar.bz2) $PROG_ZIP "$FILE" &;;
                     esac   
#                    else
#                      case "$FILE" in
#                        *.txt) uxterm -e nano "$FILE" &;;
#                        *.cc) uxterm -e nano "$FILE" &;;
#                        *.mp3) mplayer "$FILE" > /dev/tty4 &;;                           
#                        *.lst) mp3blaster -l "$FILE" > /dev/tty4 &;;
#                      esac
#                    fi
#                  fi
#                done
            fi
           fi
         fi
       fi
         ;;
        esac
      done
fi
